# -*- coding: utf-8 -*-
"""Generate sshconfig completion items."""
import os.path as path
import re
import sys
from typing import NoReturn, TextIO

import requests
from bs4 import BeautifulSoup, ElementFilter
from requests import Response


def write_completion_item(fp: TextIO, label: str, documentation: str) -> NoReturn:
    """Write completion items to file."""
    data = [
        "\t{",
        f'\t\tlabel = "{label}",',
        '\t\tkind = Keyword,',
        "\t\tdocumentation = {",
        '\t\t\tkind = "markdown",',
        "\t\t\tvalue = [[",
        f"\t\t\t{documentation}",
        "\t\t\t]],",
        "\t\t},",
        "\t},",
        "",
    ]

    fp.write("\n".join(data))


def format_completion_items(fp: TextIO) -> NoReturn:
    """Completion items format, then sending to writing."""
    r: Response = requests.get("https://man.openbsd.org/ssh_config")

    soup = BeautifulSoup(r.text, features="html.parser")
    keyword_list_tag: ElementFilter = soup.find("dl", attrs={"class": "Bl-tag"})

    label, documentation = "", ""

    for tag in keyword_list_tag.children:
        name: str = tag.name

        if name == "dt":
            label = tag["id"]
        elif name == "dd":
            for elem in tag.find_all("p"):
                elem.replace_with(f"\n\n{elem.text}\n\n")

            for elem in tag.find_all("code", attrs={"class": "Cm"}):
                elem.replace_with(f"**{elem.text}**")

            for elem in tag.find_all("var", attrs={"class": "Ar"}):
                elem.replace_with(f"|{elem.text}|")

            for elem in tag.find_all("a"):
                elem.replace_with(f"[{elem.text}]")

            documentation = tag.get_text().replace('"', '\\"')

            new_docs = [
                " ".join(p.strip(" ").split())
                for p in re.split(r"[\n]{2,}", documentation)
                if p.strip(" ") not in ("", "\n", "\r", "\t")
            ]

            documentation = "\n\n".join(new_docs)
        elif "" not in (label, documentation):
            write_completion_item(fp, label, documentation)
            label, documentation = "", ""


def main() -> int:
    """Execute the generator script."""
    if not path.exists("./lua/blink-cmp-sshconfig"):
        raise FileNotFoundError("Unable to locate `./lua/blink-cmp-sshconfig`")

    with open("./lua/blink-cmp-sshconfig/completion_items.lua", "w") as fp:
        header = [
            "--- Do NOT edit this file",
            "--- This file is autogenerated from gen_completion_items.py",
            'local Keyword = require("blink.cmp.types").CompletionItemKind.Keyword',
            "",
            "--- @type lsp.CompletionItem[]",
            "return {",
            ""
        ]
        footer = [
            "}",
            ""
            "--- vim:ts=4:sts=4:sw=0:noet:ai:si:sta:",
        ]
        fp.write("\n".join(header))
        format_completion_items(fp)
        fp.write("\n".join(footer))

    return 0


if __name__ == "__main__":
    sys.exit(main())
